class Solution{
public:
    vector<int> findTwoElement(vector<int> arr, int n) {
        // code here
        // Brute force -> easy : I can submit

       // Approach 2: TC:O(n)   SC:O(1)
      // Note this approach is only valid if there are all elements present in 1 to n range
        long long sum_array=0;
        for(int i=0;i<n;i++)
        {
            sum_array+=(long long)arr[i];         // find sum of array
        }
        
        long long sum_upto_n=0;
        for(int i=1;i<=n;i++)
        sum_upto_n+=(long long)i;                // finding sum of 1 to n numbers and just subtrat them
        
        int repeated=0,missing=0;
        // x-y=negative no         x=repeated no,y=missing no
        // int diff1=repeated-missing=(sum_array-sum_upto_n);   
        int diff1=(sum_array-sum_upto_n);     // 1 eqn we got
        
        
        long long sum_array_squares=0;
        for(int i=0;i<n;i++)
        sum_array_squares+=((long long)arr[i]*(long long)arr[i]);        // finding sum of sqaures of array
        
        long long sum_upto_n_squares=0;
        for(int i=1;i<=n;i++)
        sum_upto_n_squares+=((long long)i*(long long)i);
        
        // (x^2-y^2)=negative no  
        // (x-y)(x+y)=diff of above sum
        // (repeated-missing)(repeated+missing)=sum_array_squares-sum_upto_n_squares
       // int diff2=repeated+missing=(sum_array_squares-sum_upto_n_squares)/(repeated-missing);
        int diff2=(sum_array_squares-sum_upto_n_squares)/(diff1);
        vector<int> ans;
        ans.push_back((diff1+diff2)/2);
        ans.push_back((diff2-diff1)/2);
        return ans;
        
    }
};
